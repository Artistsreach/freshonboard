rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {

    // This rule allows anyone with your Storage bucket reference to view, edit,
    // and delete all data in your Storage bucket. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Storage bucket will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Storage bucket will be denied until you Update
    // your rules
    // Publicly readable files (e.g. site assets)
    match /public/{allPaths=**} {
      allow read;
    }

    // User-specific files (e.g. profile pictures)
    match /users/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Product images, readable by anyone, writable by authenticated users
    match /products/{allPaths=**} {
      allow read;
      allow write: if request.auth != null;
    }

    // Generated product images, readable by anyone, writable by authenticated users
    match /product_images_generated/{allPaths=**} {
      allow read;
      allow write: if request.auth != null;
    }

    // Allow users to write to their own profile picture directories.
    // This covers both 'profile_pictures' and 'profile_photos' to address inconsistencies in your code.
    match /profile_pictures/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /profile_photos/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
