import React, { useState, useEffect } from 'react'; // Added useEffect
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from '../../components/ui/dialog';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label'; // Added Label import
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Loader2, Search, Wand2 as WandIcon, UploadCloud } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import { fetchPexelsImages, generateImageWithGemini, generateId } from '../../lib/utils'; // Assuming generateImageWithGemini is suitable
import { motion } from 'framer-motion';

// Helper function (can be moved to utils)
const fileToDataUrl = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });
};

const ChangeImageModal = ({
  isOpen,
  onOpenChange,
  currentImageUrl,
  onImageSelected, // Callback with the new image URL (string)
  imageSearchContext = "image", // e.g., "store feature image", "product background"
  modalTitle = "Change Image",
  storeName = "your store" // For AI prompt context
}) => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("search");
  const [searchTerm, setSearchTerm] = useState(imageSearchContext);
  const [searchedImages, setSearchedImages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [aiPrompt, setAiPrompt] = useState(`A visually appealing ${imageSearchContext} for ${storeName}`);

  const handlePexelsSearch = async () => {
    if (!searchTerm.trim()) return;
    setIsLoading(true);
    setSearchedImages([]);
    try {
      const images = await fetchPexelsImages(searchTerm, 9, 'landscape'); // Fetch 9 images
      setSearchedImages(images.map(img => ({
        id: img.id.toString(),
        src: { medium: img.src.large, large: img.src.large }, // Use 'large' for better quality preview
        alt: img.alt || searchTerm,
        photographer: img.photographer
      })));
    } catch (error) {
      toast({ title: "Pexels Search Failed", description: error.message, variant: "destructive" });
    }
    setIsLoading(false);
  };

  const handleAiGenerate = async () => {
    if (!aiPrompt.trim()) return;
    setIsLoading(true);
    setSearchedImages([]);
    try {
      // generateImageWithGemini expects a prompt and returns { url, alt }
      const result = await generateImageWithGemini(aiPrompt); 
      if (result && result.url) {
        setSearchedImages([{
          id: generateId(),
          src: { medium: result.url, large: result.url },
          alt: result.alt || aiPrompt,
          photographer: "Generated by AI"
        }]);
        toast({ title: "AI Image Generated", description: "Select the image below or generate more." });
      } else {
        throw new Error("AI did not return an image URL.");
      }
    } catch (error) {
      toast({ title: "AI Image Generation Failed", description: error.message, variant: "destructive" });
    }
    setIsLoading(false);
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (file) {
      setIsLoading(true);
      try {
        const dataUrl = await fileToDataUrl(file);
        onImageSelected(dataUrl); // Directly use the uploaded image
        toast({ title: "Image Uploaded", description: "Your image has been selected." });
        onOpenChange(false); // Close modal after upload
      } catch (error) {
        toast({ title: "Upload Failed", description: "Could not process the uploaded file.", variant: "destructive" });
      }
      setIsLoading(false);
    }
  };

  const handleSelectImage = (imgSrc) => {
    onImageSelected(imgSrc);
    onOpenChange(false);
  };

  // Reset state when modal opens/closes or context changes
  useEffect(() => {
    if (isOpen) {
      setSearchTerm(imageSearchContext || "abstract background");
      setAiPrompt(`A visually appealing ${imageSearchContext || "image"} for ${storeName || "a store"}`);
      setSearchedImages([]);
      setActiveTab("search");
    }
  }, [isOpen, imageSearchContext, storeName]);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl md:max-w-3xl lg:max-w-4xl">
        <DialogHeader>
          <DialogTitle>{modalTitle}</DialogTitle>
        </DialogHeader>
        <div className="py-4">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="search">Search Pexels</TabsTrigger>
              <TabsTrigger value="ai">Generate with AI</TabsTrigger>
              <TabsTrigger value="upload">Upload</TabsTrigger>
            </TabsList>
            <TabsContent value="search" className="mt-4">
              <div className="flex gap-2">
                <Input
                  placeholder="Search for images on Pexels..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handlePexelsSearch()}
                />
                <Button onClick={handlePexelsSearch} disabled={isLoading || !searchTerm.trim()}>
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Search className="h-4 w-4" />}
                  <span className="ml-2 hidden sm:inline">Search</span>
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="ai" className="mt-4">
              <div className="flex gap-2">
                <Input
                  placeholder="Describe the image you want AI to generate..."
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleAiGenerate()}
                />
                <Button onClick={handleAiGenerate} disabled={isLoading || !aiPrompt.trim()}>
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <WandIcon className="h-4 w-4" />}
                   <span className="ml-2 hidden sm:inline">Generate</span>
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="upload" className="mt-4">
              <Label htmlFor="image-upload-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Upload your own image:
              </Label>
              <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md">
                <div className="space-y-1 text-center">
                  <UploadCloud className="mx-auto h-12 w-12 text-gray-400" />
                  <div className="flex text-sm text-gray-600 dark:text-gray-400">
                    <label
                      htmlFor="image-upload-input-file"
                      className="relative cursor-pointer bg-white dark:bg-gray-800 rounded-md font-medium text-primary hover:text-primary-focus focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-primary-ring"
                    >
                      <span>Upload a file</span>
                      <Input id="image-upload-input-file" name="image-upload-input-file" type="file" className="sr-only" accept="image/*" onChange={handleImageUpload} />
                    </label>
                    <p className="pl-1">or drag and drop</p>
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400">PNG, JPG, GIF up to 10MB</p>
                </div>
              </div>
            </TabsContent>
          </Tabs>

          {isLoading && searchedImages.length === 0 && (
            <div className="text-center py-10">
              <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
              <p className="mt-2 text-sm text-muted-foreground">Fetching images...</p>
            </div>
          )}

          {searchedImages.length > 0 && (
            <ScrollArea className="mt-4 max-h-[50vh]">
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 p-1">
                {searchedImages.map(img => (
                  <motion.div
                    key={img.id}
                    className="relative aspect-video rounded-md overflow-hidden cursor-pointer group border-2 border-transparent hover:border-primary transition-all"
                    onClick={() => handleSelectImage(img.src.large || img.src.medium)}
                    whileHover={{ scale: 1.03 }}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <img src={img.src.medium} alt={img.alt || 'Search result'} className="w-full h-full object-cover" />
                    <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                      <CheckCircle className="h-10 w-10 text-white" />
                    </div>
                    <p className="absolute bottom-0 left-0 right-0 bg-black/60 text-white text-[10px] p-1 truncate text-center">
                      {img.photographer || img.alt || 'Untitled'}
                    </p>
                  </motion.div>
                ))}
              </div>
            </ScrollArea>
          )}
        </div>
        <DialogFooter>
          <DialogClose asChild>
            <Button type="button" variant="outline">Cancel</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ChangeImageModal;

// Helper CheckCircle icon if not available globally
const CheckCircle = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
    <polyline points="22 4 12 14.01 9 11.01"></polyline>
  </svg>
);
