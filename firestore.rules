rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /stores/{storeId} {
      // Public read access for store data
      allow read: if true;

      // Allow create if user is authenticated and the merchant_id in the new document matches their UID
      allow create: if request.auth != null && request.resource.data.merchant_id == request.auth.uid;
      
      // Allow update and delete if user is authenticated and is the owner of the existing store document
      allow update, delete: if request.auth != null && resource.data.merchant_id == request.auth.uid;

      // Rules for 'products' subcollection nested under a store
      match /products/{productId} {
        // Public read access for products
        allow read: if true;

        // Allow create, update, delete if user is authenticated and owns the parent store document
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/stores/$(storeId)).data.merchant_id == request.auth.uid;
      }

      // Rules for 'collections' subcollection nested under a store
      match /collections/{collectionId} {
        // Public read access for collections
        allow read: if true;

        // Allow create, update, delete if user is authenticated and owns the parent store document
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/stores/$(storeId)).data.merchant_id == request.auth.uid;
      }
    }

    // If you have other top-level collections like 'profiles', define their rules here.
    // For example:
    match /profiles/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      match /saved_templates/{templateId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if false; // Disable direct client-side notification creation
      }

      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == followerId;
      }

      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /tasks/{taskId} {
        allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /contracts/{contractId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
    }

    match /leads/{leadId} {
      allow create: if request.auth != null;
    }

    match /public_templates/{templateId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && ((request.auth.uid == resource.data.userId) || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes'])));
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes']);

        match /replies/{replyId} {
          allow read: if true;
          allow create: if request.auth != null;
        }
      }
    }

    // The old, potentially incorrect top-level rules for /products and /store_collections are removed.
    // If you had other, valid top-level collections named 'products' or 'store_collections' (unlikely given the context),
    // you would need to re-add their specific rules here.
  }
}
